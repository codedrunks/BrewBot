// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#MARKER users
// global user
model User {
  id        String     @id @unique
  reminders Reminder[]
}

// guild member
model Member {
  guildId  String
  userId   String
  coins    Coins[]
  bonus    Bonus[]
  warnings Warning[]

  @@id([guildId, userId])
  @@unique([guildId, userId])
}

model Reminder {
  reminderId   Int
  userId       String
  name         String
  dueTimestamp DateTime
  guild        String?
  channel      String?
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([reminderId, userId])
}

model Warning {
  warningId Int
  userId    String
  guildId   String
  reason    String
  warnedBy  String
  timestamp DateTime
  Member    Member   @relation(fields: [userId, guildId], references: [userId, guildId], onDelete: Cascade)

  @@id([warningId, userId, guildId])
}

//#MARKER economy
// cooldowns for economy, this is how coins are 'minted'
model Bonus {
  guildId    String
  userId     String
  lastdaily  Int?
  lastwork   Int?
  totalworks Int    @default(0)
  Member     Member @relation(fields: [userId, guildId], references: [userId, guildId], onDelete: Cascade)

  @@id([guildId, userId])
}

model Coins {
  guildId String
  userId  String
  amount  Int     @default(0)
  Member  Member? @relation(fields: [userId, guildId], references: [userId, guildId], onDelete: Cascade)

  @@id([guildId, userId])
}

//#MARKER guild
model Guild {
  id            String         @id
  premium       Boolean?       @default(false)
  lastLogColor  String?
  contests      Contest[]
  polls         Poll[]
  GuildSettings GuildSettings? @relation(fields: [id], references: [guildId], onDelete: Cascade)
}

model GuildSettings {
  guildId          String   @id
  contestRoleId    String?
  contestChannelId String?
  djRoleIds        String[]
  djOnly           Boolean? @default(false)
  botLogChannel    String?
  warningThreshold Int      @default(3)
  banVoteAmt       Int      @default(2)
  Guild            Guild[]
}

model Poll {
  pollId       Int
  guildId      String
  channel      String
  messages     String[]
  createdBy    String
  headline     String?
  topic        String?
  voteOptions  String[]
  dueTimestamp DateTime
  Guild        Guild    @relation(fields: [guildId], references: [id])

  @@id([pollId, guildId])
}

//#MARKER contest
model Contest {
  id          Int
  guildId     String
  guild       Guild               @relation(fields: [guildId], references: [id])
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  submissions ContestSubmission[]

  @@id([guildId, id])
}

model ContestSubmission {
  userId    String
  contestId Int
  guildId   String
  content   String
  contest   Contest          @relation(fields: [guildId, contestId], references: [guildId, id], onDelete: Cascade)
  votes     SubmissionVote[]

  @@id([guildId, contestId, userId])
}

model SubmissionVote {
  guildId      String
  contestId    Int
  contestantId String
  voterId      String
  submission   ContestSubmission @relation(fields: [guildId, contestId, contestantId], references: [guildId, contestId, userId], onDelete: Cascade)

  @@id([guildId, contestId, contestantId, voterId])
}
